
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db6  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b2  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000504  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000466  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000047d  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	72 d0       	rcall	.+228    	; 0x198 <main>
  b4:	82 c0       	rjmp	.+260    	; 0x1ba <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_pulse_enable>:
#include <util/delay.h>
#include "CLCD.h"

void LCD_pulse_enable(void)
{
	PORT_CONTROL |= (1<<E_PIN);
  b8:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_pulse_enable+0x4>
  c0:	00 00       	nop
	_delay_us(1);
	PORT_CONTROL &= ~(1<<E_PIN);
  c2:	c7 98       	cbi	0x18, 7	; 24
  c4:	85 e3       	ldi	r24, 0x35	; 53
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_pulse_enable+0xe>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <LCD_write_data>:
	_delay_us(10);
}

void LCD_write_data(uint8_t data)
{
	PORT_CONTROL |= (1<<RS_PIN);
  ce:	c5 9a       	sbi	0x18, 5	; 24
	PORT_DATA = data;
  d0:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
  d2:	f2 df       	rcall	.-28     	; 0xb8 <LCD_pulse_enable>
  d4:	87 ec       	ldi	r24, 0xC7	; 199
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_write_data+0xa>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_write_data+0x10>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_write_command>:
	_delay_us(50);
}

void LCD_write_command(uint8_t command)
{
	PORT_CONTROL &= ~(1<<RS_PIN);
  e2:	c5 98       	cbi	0x18, 5	; 24
	PORT_DATA = command;
  e4:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
  e6:	e8 df       	rcall	.-48     	; 0xb8 <LCD_pulse_enable>
  e8:	87 ec       	ldi	r24, 0xC7	; 199
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_write_command+0xa>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_write_command+0x10>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <LCD_clear>:
	_delay_us(50);
}

void LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	f4 df       	rcall	.-24     	; 0xe2 <LCD_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	86 e7       	ldi	r24, 0x76	; 118
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <LCD_clear+0xa>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_clear+0x14>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <LCD_init>:
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <LCD_init+0x6>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_init+0x10>
 11e:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(100);
	
	DDR_DATA = 0xff;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 bb       	out	0x14, r24	; 20
	PORT_DATA = 0x00;
 124:	15 ba       	out	0x15, r1	; 21
	DDR_CONTROL |= (1<<RS_PIN) | (1<<RW_PIN) | (1<<E_PIN);
 126:	87 b3       	in	r24, 0x17	; 23
 128:	80 6e       	ori	r24, 0xE0	; 224
 12a:	87 bb       	out	0x17, r24	; 23
	
	PORT_CONTROL &= ~(1 << RW_PIN);
 12c:	c6 98       	cbi	0x18, 6	; 24
	LCD_write_command(COMMAND_8_BIT_MODE);
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	d8 df       	rcall	.-80     	; 0xe2 <LCD_write_command>
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9c e9       	ldi	r25, 0x9C	; 156
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_init+0x28>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_init+0x2e>
 13c:	00 00       	nop
	_delay_ms(10);

	PORT_CONTROL &= ~(1 << RW_PIN);
 13e:	c6 98       	cbi	0x18, 6	; 24
	LCD_write_command(COMMAND_8_BIT_MODE);
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	cf df       	rcall	.-98     	; 0xe2 <LCD_write_command>
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9c e9       	ldi	r25, 0x9C	; 156
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_init+0x3a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_init+0x40>
 14e:	00 00       	nop
	_delay_ms(10);

	PORT_CONTROL &= ~(1 << RW_PIN);
	LCD_write_command(COMMAND_8_BIT_MODE);
 150:	c6 98       	cbi	0x18, 6	; 24
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	c6 df       	rcall	.-116    	; 0xe2 <LCD_write_command>
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9c e9       	ldi	r25, 0x9C	; 156
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_init+0x4c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_init+0x52>
	_delay_ms(10);
	
	uint8_t command = 0x08 | (1<<COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 160:	00 00       	nop
 162:	8c e0       	ldi	r24, 0x0C	; 12
	
	LCD_clear();
 164:	be df       	rcall	.-132    	; 0xe2 <LCD_write_command>
 166:	c7 df       	rcall	.-114    	; 0xf6 <LCD_clear>
	
	LCD_write_command(0x06);
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	bb cf       	rjmp	.-138    	; 0xe2 <LCD_write_command>
 16c:	08 95       	ret

0000016e <LCD_write_string>:
 16e:	0f 93       	push	r16
}

void LCD_write_string(char *string)
{
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	fc 01       	movw	r30, r24
	uint8_t i;
	for (i=0; string[i]; i++)
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	51 f0       	breq	.+20     	; 0x190 <LCD_write_string+0x22>
 17c:	8f 01       	movw	r16, r30
 17e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_write_data(string[i]);
 180:	a6 df       	rcall	.-180    	; 0xce <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for (i=0; string[i]; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	f8 01       	movw	r30, r16
 186:	ec 0f       	add	r30, r28
 188:	f1 1d       	adc	r31, r1
 18a:	80 81       	ld	r24, Z
 18c:	81 11       	cpse	r24, r1
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <LCD_write_string+0x12>
	{
		LCD_write_data(string[i]);
	}
	
}
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <main>:
#include "CLCD.h"


int main(void)
{
	 PORTD = 0xff;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	82 bb       	out	0x12, r24	; 18
	 DDRD = 0xff;
 19c:	81 bb       	out	0x11, r24	; 17
	LCD_init();
 19e:	b7 df       	rcall	.-146    	; 0x10e <LCD_init>
    /* Replace with your application code */
    while (1) 
    {
		LCD_write_string("HELLOW");
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	e4 df       	rcall	.-56     	; 0x16e <LCD_write_string>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	83 ec       	ldi	r24, 0xC3	; 195
 1aa:	99 e0       	ldi	r25, 0x09	; 9
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x14>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x1e>
 1b6:	00 00       	nop
 1b8:	f3 cf       	rjmp	.-26     	; 0x1a0 <main+0x8>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
